{
  "Uuid": "c7dd4f6a-9bf3-4573-b401-7c0d1bf931cf",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Поворот на 180",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "c2fca80d0c844936b0f25bd08ef2badd",
      "Inputs": [
        {
          "Id": "cd14415dc48e44e3bd34119f663d595a",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1dbec989c93f4e65b9115744cb7f7a05",
          "Name": "amount",
          "Description": "Слои в списке, которые требуется исключить (–1 приведет к удалению всех вложенных в список слоев)\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f0690dabe7a47b8b5c754c99f8b9634",
          "Name": "list",
          "Description": "Список с выравниванием по объему",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "18263c8af3fd42cfb122ca8a4a3ef742",
      "Inputs": [
        {
          "Id": "6f455b3f9c4f43b78ce55f1a0e2497d4",
          "Name": "list",
          "Description": "Список, элементы которого требуется сосчитать.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "01f4d5f4f846401eb84d6cb71e099fc8",
          "Name": "int",
          "Description": "Длина списка.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение количества элементов, хранящихся в данном списке.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.OfRepeatedItem@var[]..[],int",
      "Id": "34bd1b63cacd478eb50119beb0713c0a",
      "Inputs": [
        {
          "Id": "49c6d7157c5046069be2709f7d9a5dfa",
          "Name": "item",
          "Description": "Элемент для повтора.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dc12378b42504e9d98c1e43da71724a7",
          "Name": "amount",
          "Description": "Число повторений.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be65d342f2804a49b9c3faf4e641ee4d",
          "Name": "list",
          "Description": "Список повторяющихся элементов.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Создание списка, содержащего данный элемент, заданное количество раз.\n\nList.OfRepeatedItem (item: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 2020\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n#https://github.com/albandechasteigner/GeniusLociForDynamo\n\nimport clr\nclr.AddReference(\"RevitNodes\")\nimport Revit\nclr.ImportExtensions(Revit.GeometryConversion)\n\nclr.AddReference(\"RevitAPI\")\nimport Autodesk\nfrom Autodesk.Revit.DB import *\nimport math\n\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\n\nelements = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]\nangles = [i* math.pi/180 for i in IN[1]] if isinstance(IN[1],list) else [IN[1]* math.pi/180]\n\ndef GetCropBox(view):\n\tprovider= ParameterValueProvider(ElementId(BuiltInParameter.ID_PARAM))\n\trule = FilterElementIdRule(provider, FilterNumericEquals(), view.Id )\n\tfilter= ElementParameterFilter(rule)\n\treturn doc.GetElement(FilteredElementCollector(view.Document).WherePasses(filter).ToElementIds().Find(lambda x: x.IntegerValue != view.Id.IntegerValue))\n\nTransactionManager.Instance.EnsureInTransaction(doc)\nfor angle, element in zip(angles, elements):\n\t#if angle>math.pi:\n\t\t#angle=abs(angle-2*math.pi)\n\t#else:angle\n\t#Get initial Rotation Angle using transform\n\t#transform=element.GetTransform()\n\t#vectorTran = transform.OfVector(transform.BasisX)\n\t#rot = transform.BasisX.AngleOnPlaneTo(vectorTran, transform.BasisZ) \n\t#rot = rot * (180 / math.pi)\n\tif hasattr(element, \"Location\") and element.OwnerViewId != None :\n\t\tloc = element.Location\n\t\tif loc:\t\n\t\t\t# Annotation symbol, importInstance and linkInstance\n\t\t\tif hasattr(element, \"GetTotalTransform\"):\n\t\t\t\ttrans=element.GetTotalTransform()\n\t\t\t\tloca = trans.Origin\n\t\t\t\trot = -trans.BasisX.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ)\n\t\t\t# point-based elements (e.g. most loadable families)\n\t\t\telif isinstance(loc,LocationPoint):\n\t\t\t\tloca=loc.Point\n\t\t\t\tif hasattr(loc, \"Rotation\"):\n\t\t\t\t\trot=loc.Rotation\n\t\t\t\t# Group, assembly\n\t\t\t\telse:rot = 0\r\n\t\t\telif isinstance(element,MEPCurve):\r\n\t\t\t\tloca=loc.Curve.Evaluate(0.5,True)\r\n\t\t\t\tfor c in element.ConnectorManager.Connectors :\r\n\t\t\t\t\trot = math.asin(c.CoordinateSystem.Inverse.BasisY.X)\r\n\t\t\telif isinstance(element,Grid):\r\n\t\t\t\tline=element.Curve\r\n\t\t\t\tstart=line.GetEndPoint(0)\r\n\t\t\t\tend=line.GetEndPoint(1)   \r\n\t\t\t\tbox=BoundingBoxXYZ()\r\n\t\t\t\tbox.Min = start\r\n\t\t\t\tbox.Max = end\r\n\t\t\t\tloca = (box.Min+box.Max)/2\r\n\t\t\t\trot = 0\t\t\t\r\n\t\t\telif isinstance(element,ReferencePlane):\r\n\t\t\t\tdoc=element.Document\r\n\t\t\t\tview = doc.ActiveView\r\n\t\t\t\tfor crv in element.GetCurvesInView(DatumExtentType.ViewSpecific,view):\r\n\t\t\t\t\tline = crv\r\n\t\t\t\tstart=line.GetEndPoint(0)\r\n\t\t\t\tend=line.GetEndPoint(1)   \r\n\t\t\t\tbox=BoundingBoxXYZ()\r\n\t\t\t\tbox.Min = start\r\n\t\t\t\tbox.Max = end\r\n\t\t\t\tloca = (box.Min+box.Max)/2\r\n\t\t\t\trot = 0\t\n\t\t\t# line-based elements (e.g. walls)\n\t\t\telif isinstance(loc,LocationCurve):\n\t\t\t\tloca=loc.Curve.Evaluate(0.5,True)\n\t\t\t\trot=loc.Curve.Direction.AngleTo(XYZ.BasisX)\n\t\t\t# CropBox\n\t\t\telif element.Category == None :\n\t\t\t\tview=doc.GetElement(element.get_Parameter(BuiltInParameter.ID_PARAM).AsElementId())\n\t\t\t\tbox = view.CropBox\n\t\t\t\ttransform = box.Transform\n\t\t\t\tmin = transform.OfPoint(box.Min)\n\t\t\t\tmax = transform.OfPoint(box.Max)\n\t\t\t\tloca = (min+max)/2\n\t\t\t\trot = 0\t\n\t\t\t# ViewSection Marker\n\t\t\telif ElementId(BuiltInCategory.OST_Viewers) == element.Category.Id :\n\t\t\t\tviewSection = doc.GetElement(ElementId(element.Id.IntegerValue + 1))\n\t\t\t\tshape=viewSection.GetCropRegionShapeManager().GetCropShape()\n\t\t\t\t#Last line of the rectangle\n\t\t\t\tl=[s for s in shape[0]][3]\n\t\t\t\tloca = l.Evaluate(0.5, True)\n\t\t\t\t#loca = viewSection.Origin\n\t\t\t\trot = 0\n\t\t\t# SectionBox\n\t\t\telif ElementId(BuiltInCategory.OST_SectionBox) == element.Category.Id:\n\t\t\t\tbox = doc.GetElement(ElementId(element.Id.IntegerValue + 1)).GetSectionBox()\n\t\t\t\ttransform = box.Transform\n\t\t\t\tmin = transform.OfPoint(box.Min)\n\t\t\t\tmax = transform.OfPoint(box.Max)\n\t\t\t\tloca = (min+max)/2\n\t\t\t\trot = 0\n\t\t\telse:\n\t\t\t\tbox = element.get_BoundingBox(None)\n\t\t\t\tloca = (box.Min+box.Max)/2\n\t\t\t\trot = 0\n\t\t\t\t# sketch-based elements (ceiling, floor and roof)\n\t\t\t\tif hasattr(element, \"FindInserts\"):\n\t\t\t\t\tfor ref in HostObjectUtils.GetTopFaces(element):\n\t\t\t\t\t\tgeomFace=element.GetGeometryObjectFromReference(ref)\n\t\t\t\t\t\t#Get BoundingBox max UV point\n\t\t\t\t\t\tmaxUV = geomFace.GetBoundingBox().Max\n\t\t\t\t\t\t#Get transform\n\t\t\t\t\t\ttrans=geomFace.ComputeDerivatives(maxUV)\n\t\t\t\t\t\tif isinstance(element,Ceiling):\n\t\t\t\t\t\t\trot = abs(trans.BasisZ.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ)-2*math.pi)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\trot = abs(trans.BasisY.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ)-math.pi)\n\t\t\t\telse:rot = 0\n\t\t#PlanView, SectionView and 3D View\n\t\telif hasattr(element, \"CropBox\") :\n\t\t\tbox = element.CropBox\n\t\t\telement = GetCropBox(element)\n\t\t\ttransform = box.Transform\n\t\t\tmin = transform.OfPoint(box.Min)\n\t\t\tmax = transform.OfPoint(box.Max)\n\t\t\tloca = (min+max)/2\n\t\t\trot = 0\t\t\t\n\t# view specific elements (e.g. filled regions)\n\telif hasattr(element, \"OwnerViewId\"):\n\t\tview=doc.GetElement(element.OwnerViewId)\n\t\tbox = element.BoundingBox[view]\n\t\tloca = (box.Min+box.Max)/2\n\t\trot = 0\n\tline = Line.CreateBound(loca, XYZ(loca.X,loca.Y,loca.Z+1))\n\t#Set Rotation\r\n\tAutodesk.Revit.DB.ElementTransformUtils.RotateElement(doc, element.Id, line, angle - rot)\nTransactionManager.Instance.TransactionTaskDone()\n\nif isinstance(IN[0], list): OUT = elements\nelse: OUT = elements[0]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "aee2d2e6f4e746e0b846fd5572c3d594",
      "Inputs": [
        {
          "Id": "16b015e2525e4260a7817ea1f7965513",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5df46495b894413c9bdc5577e9451a70",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c160305ad1304dc9a47803624dfbb468",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария Python."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "180;",
      "Id": "e9e07624d0ee4790adb0d8b493a706de",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "924934e4d20d4f2db7309a72348c0fc6",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.Creation import Document as docc\r\nfrom Autodesk.Revit.DB import Dimension, Transaction, XYZ, BuiltInCategory\r\nfrom Autodesk.Revit.DB import Reference, IndependentTag, Transform, Line\r\nfrom Autodesk.Revit.DB import IntersectionResultArray, Plane\r\nfrom Autodesk.Revit.DB import ClosestPointsPairBetweenTwoCurves\r\n\r\nfrom Autodesk.Revit.DB import Category, BuiltInCategory\r\nfrom Autodesk.Revit.UI.Selection import ObjectType, ISelectionFilter\r\nfrom Autodesk.Revit.Exceptions import OperationCanceledException\r\nimport math\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom operator import itemgetter, attrgetter\r\n\r\n\r\nclr.AddReference('System')\r\nimport System\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.GeometryReferences)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\nuiapp=DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\n\r\nview = doc.ActiveView\r\ndataEnteringNode = IN\r\n\r\nclass Get_revit_elements:\r\n    \"\"\"Класс для поиска элементов в Revit.\"\"\"\r\n\r\n    @classmethod\r\n    def get_elems_by_category(cls, category_class, active_view=None, name=None):\r\n        \"\"\"Получение элемента по классу категории.\"\"\"\r\n        if not active_view:\r\n            els = FilteredElementCollector(doc).OfClass(category_class).\\\r\n                  ToElements()\r\n        else:\r\n            els = FilteredElementCollector(doc, active_view).\\\r\n                  OfClass(category_class).ToElements()\r\n        if name:\r\n            els = [i for i in els if name in i.Name] \r\n        return els\r\n\r\n    @classmethod\r\n    def get_elems_by_builtinCategory(cls, built_in_cat=None, include=[],\r\n                                     active_view=None):\r\n        \"\"\"Получение элемента по встроенному классу.\"\"\"\r\n        if not include:\r\n            if not active_view:\r\n                els = FilteredElementCollector(doc).OfCategory(built_in_cat)\r\n            else:\r\n                els = FilteredElementCollector(doc, active_view).\\\r\n                      OfCategory(built_in_cat)\r\n            return els.ToElements()\r\n        if include:\r\n            new_list = []\r\n            for i in include:\r\n                if not active_view:\r\n                    els = FilteredElementCollector(doc).OfCategory(built_in_cat)\r\n                else:\r\n                    els = FilteredElementCollector(doc, active_view).\\\r\n                          OfCategory(built_in_cat)\r\n                new_list += els.ToElements()\r\n            return new_list\r\n\r\nclass Pick_by_category(ISelectionFilter):\r\n    doc = uidoc.Document\r\n    def __init__(self, built_in_category):\r\n        if isinstance(built_in_category, Category):\r\n            self.built_in_category = [built_in_category.Id]\r\n        else:\r\n            if isinstance(built_in_category, BuiltInCategory):\r\n                built_in_category = [built_in_category]\r\n            self.built_in_category = [Category.GetCategory(self.doc, i).Id for i in built_in_category]\r\n\r\n    def AllowElement(self, el):\r\n        if el.Category.Id in self.built_in_category:\r\n            return True\r\n        return False\r\n\r\n    def AllowReference(self, refer, xyz):\r\n        return False\r\n\r\nclass Pick_by_class(ISelectionFilter):\r\n    doc = uidoc.Document\r\n    def __init__(self, class_type):\r\n        self.class_type = class_type\r\n\r\n    def AllowElement(self, el):\r\n        if isinstance(el, self.class_type):\r\n            return True\r\n        return False\r\n\r\n    def AllowReference(self, refer, xyz):\r\n        return False\r\n\r\n\r\nclass Selections:\r\n    \"\"\"Класс с реализацией различных методов выбора элементов.\"\"\"\r\n\r\n    selection = uidoc.Selection\r\n    doc = uidoc.Document\r\n    @classmethod\r\n    def pick_element_by_category(cls, built_in_category):\r\n        \"\"\"Выбор одного элемента по BuiltInCategory.\"\"\"\r\n        try:\r\n            return cls.doc.GetElement(cls.selection.PickObject(ObjectType.Element, Pick_by_category(built_in_category)))\r\n        except OperationCanceledException:\r\n            return\r\n        \r\n    \r\n    @classmethod\r\n    def pick_elements_by_category(cls, built_in_category):\r\n        \"\"\"Выбор нескольких элементов по категории.\"\"\"\r\n        try:\r\n            return [cls.doc.GetElement(i) for i in cls.selection.PickObjects(ObjectType.Element, Pick_by_category(built_in_category))]\r\n        except OperationCanceledException:\r\n            return\r\n\t        \r\n    @classmethod\r\n    def pick_element_by_class(cls, class_type):\r\n        \"\"\"Выбор одного элемента по категории.\"\"\"\r\n        try:\r\n            return cls.doc.GetElement(cls.selection.PickObject(ObjectType.Element, Pick_by_class(class_type)))\r\n        except OperationCanceledException:\r\n            return\r\n\r\n    @classmethod\r\n    def pick_elements_by_class(cls, class_type):\r\n        \"\"\"Выбор нескольких элементов  по категории.\"\"\"\r\n        try:\r\n            return [cls.doc.GetElement(i) for i in cls.selection.PickObjects(ObjectType.Element, Pick_by_class(class_type))]\r\n        except OperationCanceledException:\r\n            return\r\n            \r\nOUT = Selections.pick_elements_by_category(BuiltInCategory.OST_Grids)\r\n   ",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "a81a2fc0ad8d497cac09d25944a5e5a2",
      "Inputs": [
        {
          "Id": "e807a8ccd8cb49e1a4528463215b4a42",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d1887e68d4204014acf6a358b00833be",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария Python."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetPinnedStatus@bool",
      "Id": "0384003df43043258f0f1391e6e35338",
      "Inputs": [
        {
          "Id": "57cb9eca2c4a47ff833659de504d8139",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e7e1ac6f6ca4b5287928b771c17fcc1",
          "Name": "pinned",
          "Description": "Значение статуса закрепления True/False\n\nbool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "21a800e6ef284226960ef55035da2e6c",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание статуса закрепленного существующего элемента\n\nElement.SetPinnedStatus (pinned: bool): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "false;",
      "Id": "8965d15c91a2475b8653f820a9c6da7e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2b6dc35b00b5463c912de1e3eae7a2ac",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetPinnedStatus@bool",
      "Id": "3b5c5072e03443d5905751319db4bfe8",
      "Inputs": [
        {
          "Id": "6be54d3c17a84e38804369d6bfbffa61",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16249effe9b8400389dee4da05f7d25b",
          "Name": "pinned",
          "Description": "Значение статуса закрепления True/False\n\nbool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7bdc8ff407fc4248aea50d4eece99edf",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание статуса закрепленного существующего элемента\n\nElement.SetPinnedStatus (pinned: bool): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "true;",
      "Id": "a9204aaf5ef847fd93743dbee908ad10",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ba055a5676294893bced8a2c286e9f9b",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    }
  ],
  "Connectors": [
    {
      "Start": "9f0690dabe7a47b8b5c754c99f8b9634",
      "End": "16b015e2525e4260a7817ea1f7965513",
      "Id": "4bd6eb27158d4930b356db5e56b1a67b"
    },
    {
      "Start": "9f0690dabe7a47b8b5c754c99f8b9634",
      "End": "6f455b3f9c4f43b78ce55f1a0e2497d4",
      "Id": "923c46e9a8184137826632efcb5fd557"
    },
    {
      "Start": "01f4d5f4f846401eb84d6cb71e099fc8",
      "End": "dc12378b42504e9d98c1e43da71724a7",
      "Id": "9af6b39ce45548f29192e86d39a79921"
    },
    {
      "Start": "be65d342f2804a49b9c3faf4e641ee4d",
      "End": "5df46495b894413c9bdc5577e9451a70",
      "Id": "8a7ad837646848d2b62a045063f668ed"
    },
    {
      "Start": "c160305ad1304dc9a47803624dfbb468",
      "End": "6be54d3c17a84e38804369d6bfbffa61",
      "Id": "a5459a21583f4e629e93b0a73331329c"
    },
    {
      "Start": "924934e4d20d4f2db7309a72348c0fc6",
      "End": "49c6d7157c5046069be2709f7d9a5dfa",
      "Id": "ea71c7b2492b4de1937c03966da6c07e"
    },
    {
      "Start": "d1887e68d4204014acf6a358b00833be",
      "End": "57cb9eca2c4a47ff833659de504d8139",
      "Id": "1fd788eb6b03455f89f1099cbdf5c7ec"
    },
    {
      "Start": "21a800e6ef284226960ef55035da2e6c",
      "End": "cd14415dc48e44e3bd34119f663d595a",
      "Id": "2a2c5f9cdf754ce3b506cd8d9b14d50e"
    },
    {
      "Start": "2b6dc35b00b5463c912de1e3eae7a2ac",
      "End": "2e7e1ac6f6ca4b5287928b771c17fcc1",
      "Id": "fd393810e8bb4896a7d05e7059e7f840"
    },
    {
      "Start": "ba055a5676294893bced8a2c286e9f9b",
      "End": "16249effe9b8400389dee4da05f7d25b",
      "Id": "c608eba135fa46db9e530d6b5ec384c9"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "1.10",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "Нет",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.1.8246",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Фоновый просмотр",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "c2fca80d0c844936b0f25bd08ef2badd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 706.2553934669869,
        "Y": 279.0
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "18263c8af3fd42cfb122ca8a4a3ef742",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 933.543866938127,
        "Y": 362.285885137455
      },
      {
        "ShowGeometry": true,
        "Name": "List.OfRepeatedItem",
        "Id": "34bd1b63cacd478eb50119beb0713c0a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1190.3907670001372,
        "Y": 391.06126398257703
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "aee2d2e6f4e746e0b846fd5572c3d594",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1420.245748941617,
        "Y": 283.09272594165981
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e9e07624d0ee4790adb0d8b493a706de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 940.187411985827,
        "Y": 506.58425689896006
      },
      {
        "ShowGeometry": true,
        "Name": "Выбор осей",
        "Id": "a81a2fc0ad8d497cac09d25944a5e5a2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 125.31999981628553,
        "Y": 275.755570285776
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetPinnedStatus",
        "Id": "0384003df43043258f0f1391e6e35338",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 408.131440575826,
        "Y": 320.32883531377922
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "8965d15c91a2475b8653f820a9c6da7e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 267.94930497605276,
        "Y": 410.29226377739144
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetPinnedStatus",
        "Id": "3b5c5072e03443d5905751319db4bfe8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1579.2223324810486,
        "Y": 480.8603957771918
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a9204aaf5ef847fd93743dbee908ad10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1439.0401968812757,
        "Y": 570.82382424080379
      }
    ],
    "Annotations": [],
    "X": -1301.649235620298,
    "Y": -162.07490456084537,
    "Zoom": 0.95451884448718149
  }
}